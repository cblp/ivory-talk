$newline text

<section>
    <h2> Производительный <nobr>и безопасный</nobr> код <nobr>на Haskell</nobr>
    <p> Юрий Сыровецкий <br> разработчик, Лаборатория Касперского

<section>
    <p> Мы разрабатываем
    <h3> KasperskyOS
    <h3> Kaspersky Security System
    <p> На Haskell пишем системные компоненты и инструменты

<section>
    <h3> Требования
    <ol>
        <li> гарантированное время выполнения
        <li> гарантированное потребление памяти
        <li> возможность ручного управления памятью и аппаратным обеспечением
        <li> поддержка встраиваемых систем и специализированных архитектур
        <li> простота расширения и взаимодействия <nobr>с кодом,</nobr> #
            написанным другими разработчиками

<section>
    <h3> <nobr>Решение —</nobr> писать <nobr>на C</nobr>
    <nobr>C —</nobr> очень мощный и гибкий инструмент

<section>
    <h3> Проблема C
    <nobr>C —</nobr> слишком мощный и гибкий инструмент

<section>
    <h3> Требования
    <ol>
        <li> гарантии корректности кода
        <li> язык высокого уровня (выразительность и прочие достижения цивилизации)

<section>
    <h3> <nobr>Решение —</nobr> писать <nobr>на C</nobr>
        \ <nobr>и проверять</nobr> код <nobr>на ошибки</nobr> статическим анализатором
    <p> не даёт гарантий корректности

<section>
    <h3> Решение <nobr>лучше —</nobr> писать <nobr>на Haskell</nobr> метапрограммы,
        \ порождающие код <nobr>на C</nobr>

<section>
    <h2> Способ 0. <br> Текстовая шаблонизация
    <ol>
        <li> просто
        <li> можно уменьшить boilerplate
        <li> <nobr>но нет</nobr> существенных преимуществ перед обычным #
            C <nobr>с препроцессором</nobr>

<section>
    <h2> Способ 1. <br> Библиотеки <br> <code>language-c</code>, <br> <code>language-c-quote</code>

<section>
    <h3> <code>language-c-quote</code>: хеллоуолд
    <pre>
        <code>
            \main = do
            \    msg:_ &lt;- getArgs
            \    putDoc $ ppr [cunit|
            \        $esc:("#include &lt;stdio.h>")
            \        int main() {
            \            puts($string:msg);
            \            return 0;
            \        }
            \    |]

<section>
    <h3> <code>language-c-quote</code>: AST хеллоуолда
    <pre>
        <code>
            \[ EscDef "#include &lt;stdio.h>"
            \, FuncDef
            \    (OldFunc
            \       (DeclSpec [] [] (Tint Nothing))
            \       (Id "main")
            \       (DeclRoot)
            \       []
            \       Nothing
            \       [ BlockStm (Exp
            \           (Just (FnCall (Var (Id "puts"))
            \              [ Const ( StringConst
            \                  "CoLaboratory: ruHaskell 2016")])))
            \       , BlockStm (Return
            \           (Just (Const (IntConst "0" Signed 0))))])]

<section>
    <h3> <code>language-c-quote</code>: сгенерированный код хеллоуолда
    <pre>
        <code>
            \#include &lt;stdio.h>
            \int main() {
            \    puts("CoLaboratory: ruHaskell 2016");
            \    return 0;
            \}

<section>
    <h3> <code>language-c-quote</code>: достоинства
    <ol>
        <li> квазицитаты — можно писать почти как на C,
            \ код может читать C-программист, <nobr>не знающий</nobr> Haskell
        <li> проверка синтаксиса C при написании
        <li> простые типы для работы <nobr>с AST —</nobr>
            \ можно обработать AST привычными средствами (Generics, SYB...)
        <li> антицитата <code>$esc</code> позволяет вставить произвольный код при необходимости

<section>
    <h3> <code>language-c-quote</code>: чего не хватает
    <ol>
        <li> никак не ограничивает нас <nobr>в использовании</nobr> C
        <li> всё ещё нет проверки корректности кода
            <ol>
                <li> то, что может проверить GCC, но можно бы ещё раньше
                    \ (например, соответствие типов, дублирование символов)
                <li> то, чего не может проверить GCC
                    \ (например, сильное соответствие типов, целочисленное переполнение и т. д.)

<section>
    <h3> <code>language-c-quote</code>: подводные камни
    <ol>
        <li> не поддерживаются вложенные цитаты в антицитатах
        <li> необходимость <code>$esc</code> для <code>#include</code>

<section>
    <h2> Способ 2. <br> Библиотека-DSL Ivory
    <ol>
        <li> eDSL <nobr>с ограниченными</nobr> <nobr>возможностями —</nobr> #
            это убирает целые классы ошибок
        <li> ограничения закодированы в типах
        <li>
            <span .fragment .strike-out data-fragment-index=1>компилируется => работает
            <span .fragment .fade-out data-fragment-index=1>?
        <li .fragment data-fragment-index=1> компилируется => есть гарантии определённых свойств

<section>
    <h3> Ivory AST
    <ol>
        <li> проще и ближе к семантике, чем AST языка C
        <li> можно переписывать и оптимизировать (Ivory уже это делает)
        <li> можно транслировать <nobr>не только</nobr> <nobr>в текст</nobr> <nobr>на C</nobr>, #
            <nobr>но и в другие</nobr> представления (например, для автоматических доказательств)
        <li> можно инструментировать
        <li> ...

<section>
    <h3> Ivory: хеллоуолд
    <pre style="box-shadow: none;">
        <code>
            \cmain :: String -> Def ('[] :-> IInt)
            \cmain msg = proc "main" $ body $ do
            \    call_ puts (fromString msg)
            \    ret 0
        <code .fragment>
            \
            \puts :: Def ('[IString] :-> IInt)
            \puts = importProc "puts" "stdio.h"
            \
            \hello msg = package "ivory-hello" $ do
            \    incl puts
            \    incl (cmain msg)
            \
            \main = do
            \    msg:rest &lt;- getArgs
            \    withArgs rest $ C.compile [hello msg] []

<section>
    <h3> Ivory: сгенерированный код хеллоуолда
    <code>ivory-hello.h
    <pre>
        <code>
            \#include &lt;stdio.h>
            \#include "ivory.h"
            \int32_t main(void);
    <code>ivory-hello.c
    <pre>
        <code>
            \#include "ivory-hello.h"
            \
            \int32_t main(void) {
            \    puts("CoLaboratory: ruHaskell 2016");
            \    return (int32_t) 0;
            \}

<section data-background-image="codegen.blockdiag.svg">

<section>
    <h3> Ivory: использование Haskell <nobr>для «умных</nobr> макросов»
    <pre>
        <code>
            \class CPrint a where
            \    cprint :: a -> Ivory eff ()
            \
            \instance CPrint IString where
            \    cprint s = call_ puts s
            \
            \instance CPrint Uint32 where
            \    cprint n = call_ printf "%u\n" n
            \
            \cmain = proc "main" $ body $ do
            \    cprint ("CoLaboratory: ruHaskell" :: IString)
            \    cprint (2016 :: Uint32)
            \    ret 0

<section>
    <h3> Ivory: cгенерированный код «умных макросов»
    <pre>
        <code>
            \int32_t main(void) {
            \    puts("CoLaboratory: ruHaskell");
            \    printf("%u\n", (uint32_t) 2016U);
            \    return (int32_t) 0;
            \}

<section>
    <h3> Ivory: гарантии безопасности

<section>
    <h4> Пример: безопасная сумма элементов массива
    <pre>
        <code style="max-height: none;">
            \csum :: KnownNat n
            \     => Def ('[ ConstRef -- (1) указатель не noll
            \                -- ^ (2) данные не изменяются
            \                  s
            \                  (Array n (Stored Uint32)) ]
            \                      -- ^ доступно n ячеек памяти
            \            :-> Uint32)
            \csum = proc "sum" $ \xs -> body $ do
            \    r &lt;- local izero
            \    -- ^ (3) -- переменная обязательно инициализирована
            \    arrayMap $ \i -> do
            \        s &lt;- deref r
            \        x &lt;- deref (xs ! i)
            \        -- ^ (4) -- i :: Ix n
            \        -- значения 'i' ограничены размером массива
            \        -- не произойдёт выход за границы массива
            \        store r (s + x)
            \    ret =&lt;&lt; deref r

<section>
    <pre>
        <code>
            \do  let px = xs ! i
            \    x &lt;- deref px
            \    store px $ s + x
    <pre>
        <code>
            \Cooldn't match type ‘Ref s0 ('Array n0 ('Stored r0))’
            \               with ‘ConstRef s ('Array n ('Stored Uint32))’
            \arising from a functional dependency between:
            \  constraint ‘Ivory.Language.Proc.IvoryProcDef
            \                ('[ConstRef s ('Array n ('Stored Uint32))] ':-> Uint32)
            \                (Ref s0 ('Array n0 ('Stored r0)) -> Body r0)’
            \    arising from a use of ‘proc’
            \  instance ‘Ivory.Language.Proc.IvoryProcDef
            \              ((a : args) ':-> ret) (a -> k)’
            \    at &lt;no location info>
            \In the expression: proc "sum"

<section>
    <h3> Ivory: использование Haskell <nobr>для контроля</nobr> типов процедур <nobr>на C</nobr>

<section>
    <h4> Пример: безопасный вызов <code>qsort</code>
    <table .simple>
        <tr>
            <td>
                сигнатура <nobr>в C</nobr>
            <td width="100%">
                <pre>
                    <code .c>
                        \void
                        \qsort(
                        \    void * base,
                        \    size_t nel,
                        \    size_t width,
                        \    int (* compar)(const void *, const void *)
                        \);
        <tr>
            <td>
                импорт <nobr>в Ivory</nobr>
            <td width="100%">
                <pre>
                    <code>
                        \_qsort :: Def ('[ Ptr s (Stored ())
                        \                , Size
                        \                , Size
                        \                , Ptr s (Stored ()) ]
                        \              :-> ())
                        \_qsort = importProc "qsort" "stdlib.h"
<section>
    <h4> <code>qsortBy</code>: безопасный интерфейс
    <pre>
        <code>
            \type CompareProc s area =
            \    Def ('[ ConstRef s area
            \          , ConstRef s area ]
            \        :-> IInt)
            \
            \qsortBy :: CompareProc s area
            \        -> Ref s (Array n area)
            \        -> Ivory eff ()

<section>
    <h4> <code>qsortBy</code>: использование
    <pre>
        <code>
            \cmp_u8_rev :: CompareProc s (Stored Uint8)
            \cmp_u8_rev = proc "cmp_u8_rev" $ \px py -> body $ do
            \    x &lt;- deref px
            \    y &lt;- deref py
            \    ret $ safeCast y - safeCast x
            \    -- ^ между прочим, сильная типизация
            \
            \cmain = proc "main" $ body $ do
            \    ...
            \    qsortBy cmp_u8_rev exampleArray
            \    ...

<section>
    <h4> <code>qsortBy</code>: реализация
    <pre>
        <code>
            \type CompareProc s area =
            \    Def ('[ConstRef s area, ConstRef s area] :-> IInt)
            \
            \qsortBy ::
            \    forall s n area eff .
            \    (KnownNat n, IvoryArea area, IvorySizeOf area) =>
            \    CompareProc s area -> Ref s (Array n area) -> Ivory eff ()
            \qsortBy compareProc array =
            \    call_ _qsort
            \        (ivoryCast array)
            \        (fromInteger $ natVal (Proxy :: Proxy n))
            \        (sizeOf (Proxy :: Proxy area))
            \        (ivoryCast' (procPtr compareProc))

<section>
    <h4> <code>qsortBy</code>: сгенерированный код
    <pre>
        <code>
            \int32_t cmp_u8_rev(const uint8_t *n_var0, const uint8_t *n_var1) {
            \    uint8_t n_deref0 = *n_var0;
            \    uint8_t n_deref1 = *n_var1;
            \
            \    return (int32_t) ((int32_t) n_deref1 - (int32_t) n_deref0);
            \}
            \
            \int32_t main(void) {
            \    uint8_t n_local0[32U] = {...};
            \    uint8_t *n_ref1 = n_local0;
            \    char *n_cse0 = (char *) n_ref1;
            \
            \    qsort((void *) n_ref1, (uint64_t) 32U,
            \        (uint64_t) sizeof(uint8_t), (void *) cmp_u8_rev);
            \    return (int32_t) 0;
            \}

<section>
    <h4> <nobr>Ivory QQ —</nobr> внешний DSL
    <pre>
        <code>
            \import (stdio.h, printf) int32_t printf2(string x, int32_t y)
            \import foo.h &int32_t[4] const anArea3[]
            \
            \bar = 3 + 2; -- A top level definition
            \type Boo = int8_t;
            \
            \struct Bar00 {
            \    &int32_t aBar00;
            \}
            \
            \uint8_t foo12(* uint8_t a, G*uint8_t b, * uint8_t c, S* uint8_t d) {
            \    store b as *a;
            \    return *b + *c + *d;
            \}

<section>
    <h3> Ivory: достоинства
    <ol>
        <li> корректность кода на входе гарантируется системой типов Haskell
        <li> корректность синтаксиса на выходе гарантируется библиотекой #
            <code>language-c-quote</code>
        <li> предусмотрены способы защиты от многих UB и UB
        <li> исправляются проблемы слабой <nobr>типизации —</nobr> #
            используется сильно типизированное подмножество
        <li> вместо опасного <nobr>препроцессора —</nobr> хорошо типизированные #
            полиморфные «макросы» на Haskell
            <ol>
                <li> имитация полиморфизма в C

<section>
    <h3> Ivory: больше достоинств
    <ol>
        <li> <nobr><code>ivory-formal-model</code> —</nobr> #
            доказательство (Isabelle) корректности программ <nobr>на языке</nobr> Ivory
        <li> генерация property тестов QuickCheck
            <!--пример?-->
            <ol>
                <li> можно сгенерировать тесты даже для функций, написанных <nobr>на C</nobr>
        <li> аналитическая проверка свойств (model checking)
            <ol>
                <li> исходного кода на Ivory с помощью SMT-решателя CVC4
                <li> результирующего кода на C с помощью CBMC
        <li> <code>Expr</code> как символьно-числовой тип <nobr>данных —</nobr> #
            кодогенерация <nobr>из любого</nobr> достаточно обобщённого кода #
            (<code>estimator</code>)

<section>
    <h3> Ivory: недостатки фундаметальные
    <ol>
        <li> мало документации
        <li> Ivory /= <nobr>Haskell —</nobr> <nobr>не все</nobr> #
            возможности Haskell можно транслировать <nobr>в C</nobr>
        <li> Ivory /= <nobr>C —</nobr> <nobr>не все</nobr> #
            возможности языка C покрываются языком Ivory
        <li> программист должен хорошо разбираться <nobr>и в C</nobr>, #
            <nobr>и в Haskell</nobr> <nobr>на уровне</nobr> типов
        <li> сообщения об ошибках бывает трудно разбирать (типично для eDSL)

<section>
    <h3> Ivory: недостатки практические
    <ol>
        <li> константы <nobr>для C</nobr> должны быть известны #
            <nobr>на этапе</nobr> компиляции <nobr>Haskell —</nobr> #
            приходится добавлять ещё один уровень кодогенерации #
            (Template Haskell)
        <li> неудобства <nobr>при работе</nobr> <nobr>с типами</nobr>, #
            структурами <nobr>и процедурами</nobr>, #
            определёнными <nobr>в C</nobr>

<section>
    <h3> Ivory: подводные камни
    <pre>
        <code .haskell>
            \do  exampleArray &lt;- local
            \        (iarray $ map ival [0, 1, 2, 3]
            \        :: Init (Array 4 (Stored Uint32)))
            \    x &lt;- deref (exampleArray ! 4)
            \    call_ printf "%u\n" x
    <p .fragment> компилируется
    <p .fragment> не падает
    <pre .fragment>
        <code>
            \0

<section>
    <h3> Ivory: альтернативы
    <table .code .simple>
        <tr>
            <td> Atom
            <td>
                <a href="http://hackage.haskell.org/package/atom">hackage.haskell.org/package/atom
        <tr>
            <td> Copilot
            <td>
                <a href="http://hackage.haskell.org/package/copilot">hackage.haskell.org/package/copilot
                <br>
                <a href="http://leepike.github.io/Copilot/">leepike.github.io/Copilot
        <tr>
            <td> Filet-o-Fish
            <td>
                <a href="https://www.microsoft.com/en-us/research/publication/filet-o-fish-practical-and-dependable-domain-specific-languages-for-os-development/">
                    microsoft.com/<wbr>en-us/<wbr>research/<wbr>publication/<wbr>filet-o-fish-practical-and-dependable-domain-specific-languages-for-os-development
        <!--<tr>
            <td> impure-->
        <tr>
            <td> SBV
            <td>
                <a href="http://hackage.haskell.org/package/sbv">hackage.haskell.org/package/sbv
                <br>
                <a href="http://leventerkok.github.io/sbv/">leventerkok.github.io/sbv
        <tr>
            <td> Tower
            <td>
                <a href="http://ivorylang.org/tower-overview.html">ivorylang.org/tower-overview.html

<section>
    <h3> Выводы
    <ol>
        <li> Haskell облегчает написание и генерацию кода на C.
        <li> И language-c-quote, и Ivory хороши. Каждый со своими ограничениями.

<section>
    <p> Юрий Сыровецкий, разработчик, Лаборатория Касперского
    <p>
        <a href="spam@kaspersky.com">
            <code>Yury.Syrovetsky@kaspersky.com
    <p>
        <a href="https://twitter.com/cblp_su">
            <code>twitter.com/cblp_su
    <p>
        <a href="https://github.com/cblp/ivory-talk/tree/master/code">
            <code>github.com/cblp/ivory-talk
